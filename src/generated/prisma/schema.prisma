// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  password              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  musicSheets           MusicSheet[]
  musicSheetCategories  MusicSheetCategory[]
  musicSheetInstruments MusicSheetInstrument[]
  musicSheetVersions    MusicSheetVersion[]
}

model MusicSheet {
  id           String                @id @default(uuid())
  name         String
  file         String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  versions     MusicSheetVersion[]
  user         User?                 @relation(fields: [userId], references: [id])
  userId       String
  categoryId   String?
  instrumentId String?
  category     MusicSheetCategory?   @relation(fields: [categoryId], references: [id])
  instrument   MusicSheetInstrument? @relation(fields: [instrumentId], references: [id])
}

model MusicSheetCategory {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  musicSheets MusicSheet[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model MusicSheetInstrument {
  id          String       @id @default(uuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  musicSheets MusicSheet[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model MusicSheetVersion {
  id           String      @id @default(uuid())
  name         String
  file         String
  action       String
  musicSheet   MusicSheet? @relation(fields: [musicSheetId], references: [id])
  musicSheetId String?
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime    @default(now())
  version      Int
}
